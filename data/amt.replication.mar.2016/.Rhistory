#error.bar(1:i,dat$x[,1],2*dat$x[,2])
dat = filterUppers(.df.anl,thisL) # high information
if (i == 1) {
points(dat$Group.1,dat$x[,1],type=ltyp,
lwd=lwd,col='red',pch=pchHigh,lty='solid')
textx = -.5
points(c(-.5,-.5),c(0,400),type='l',col='gray')
} else {
points(dat$Group.1+sum(lrange[1:(i-1)])+2*(i-1), # plot high information items
dat$x[,1],type=ltyp,lwd=lwd,
col='red',pch=pchHigh,lty='solid')
thisx = sum(lrange[1:(i-1)])+2*(i-1)-.5
points(c(thisx,thisx),c(0,400),type='l',col='gray') # aesthetics: dividers
textx = sum(lrange[1:(i-1)])+2*(i-1) # where the k= should go
}
text(textx,224,paste('k =',thisL),cex=.8,pos=4) # specify length on plot
#error.bar(1:i,dat$x[,1],2*dat$x[,2])
}
### let's show the on the plot in the same way, to the left
dat = filterDowners(.df.anl[.df.anl$cw=='the',],3)
points(dat$Group.1-5,dat$x[,1],
type=ltyp,lwd=lwd,ylim=c(miny,maxy),pch=pchLow,col='darkgreen')
dat = filterUppers(.df.anl[.df.anl$cw=='the',],3)
points(dat$Group.1-5,
dat$x[,1],type=ltyp,lwd=lwd,col='red',pch=pchHigh,lty='solid')
thisx = sum(lrange[1:(i-1)])+2*(i-1)-.5
points(c(thisx,thisx),c(0,400),type='l',col='gray')
text(-6,224,paste('\"the\"'),cex=.8,pos=4)
title(xlab='Character position (1, ..., k)',line=1)
unique(.df.anl[.df.anl$wlen==3,]$cw)
filterDowners = function(.df.anl,thisL) { # to avoid using these lines twice... filters down data
.d = .df.anl[.df.anl$wlen==thisL&.df.anl$k<=thisL,]
#.d = .d[.d$givenPrevW<median(.d$givenPrevW),]
.d = .d[.d$givenNextW<median(.d$givenNextW),]
dat = aggregate(.d$residRT,by=list(.d$k),FUN = function(x) c(mean = mean(x), sd = sd(x)))
dat$x[,2] = dat$x[,2]/sqrt(length(unique(.d$s)))
return(dat)
}
filterUppers = function(.df.anl,thisL) {
.d = .df.anl[.df.anl$wlen==thisL&.df.anl$k<=thisL,]
.d = .d[.d$givenNextW>=median(.d$givenNextW),]
dat = aggregate(.d$residRT,by=list(.d$k),FUN = function(x) c(mean = mean(x), sd = sd(x)))
dat$x[,2] = dat$x[,2]/sqrt(length(unique(.d$s)))
return(dat)
}
for (i in 1:length(lrange)) {
thisL = lrange[i] #
dat = filterDowners(.df.anl,thisL) # low information
if (i == 1) {
plot(dat$Group.1,dat$x[,1],type=ltyp,lwd=lwd, # plot low-information items
ylim=c(miny,maxy),xlim=c(-4,54),xaxt='none',
pch=pchLow,col='darkgreen',
xlab='',ylab='IKI (ms)',
main='IKI by Word Length and Predictability')
} else {
points(dat$Group.1+sum(lrange[1:(i-1)])+2*(i-1),dat$x[,1], # superimpose
type=ltyp,lwd=lwd,ylim=c(miny,maxy),
pch=pchLow,col='darkgreen')
}
#error.bar(1:i,dat$x[,1],2*dat$x[,2])
dat = filterUppers(.df.anl,thisL) # high information
if (i == 1) {
points(dat$Group.1,dat$x[,1],type=ltyp,
lwd=lwd,col='red',pch=pchHigh,lty='solid')
textx = -.5
points(c(-.5,-.5),c(0,400),type='l',col='gray')
} else {
points(dat$Group.1+sum(lrange[1:(i-1)])+2*(i-1), # plot high information items
dat$x[,1],type=ltyp,lwd=lwd,
col='red',pch=pchHigh,lty='solid')
thisx = sum(lrange[1:(i-1)])+2*(i-1)-.5
points(c(thisx,thisx),c(0,400),type='l',col='gray') # aesthetics: dividers
textx = sum(lrange[1:(i-1)])+2*(i-1) # where the k= should go
}
text(textx,224,paste('k =',thisL),cex=.8,pos=4) # specify length on plot
#error.bar(1:i,dat$x[,1],2*dat$x[,2])
}
### let's show the on the plot in the same way, to the left
dat = filterDowners(.df.anl[.df.anl$cw=='the',],3)
points(dat$Group.1-5,dat$x[,1],
type=ltyp,lwd=lwd,ylim=c(miny,maxy),pch=pchLow,col='darkgreen')
dat = filterUppers(.df.anl[.df.anl$cw=='the',],3)
points(dat$Group.1-5,
dat$x[,1],type=ltyp,lwd=lwd,col='red',pch=pchHigh,lty='solid')
thisx = sum(lrange[1:(i-1)])+2*(i-1)-.5
points(c(thisx,thisx),c(0,400),type='l',col='gray')
text(-6,224,paste('\"the\"'),cex=.8,pos=4)
title(xlab='Character position (1, ..., k)',line=1)
rootFolder = '~/Dropbox/webstuff/plot-summary/analysis/final-to-share/data/sona.dec.2015/' # first SONA study
setwd(rootFolder)
load('keystrokes.RData')
source('../../Participant-Details.R') # prints details in console
source('../../Clean-Data-Sheet.R') # prints details in console
source('../../Table-Sample-Data.R') # stores data sample as .tex in data folder
source('../../Results-Main-Stats.R') # stores coefficients / details as .tex in data folder
.df.anl$residRT = resid(lm(RT~digraphBL,data=.df.anl))
for (i in 1:length(lrange)) {
thisL = lrange[i] #
dat = filterDowners(.df.anl,thisL) # low information
if (i == 1) {
plot(dat$Group.1,dat$x[,1],type=ltyp,lwd=lwd, # plot low-information items
ylim=c(miny,maxy),xlim=c(-4,54),xaxt='none',
pch=pchLow,col='darkgreen',
xlab='',ylab='IKI (ms)',
main='IKI by Word Length and Predictability')
} else {
points(dat$Group.1+sum(lrange[1:(i-1)])+2*(i-1),dat$x[,1], # superimpose
type=ltyp,lwd=lwd,ylim=c(miny,maxy),
pch=pchLow,col='darkgreen')
}
#error.bar(1:i,dat$x[,1],2*dat$x[,2])
dat = filterUppers(.df.anl,thisL) # high information
if (i == 1) {
points(dat$Group.1,dat$x[,1],type=ltyp,
lwd=lwd,col='red',pch=pchHigh,lty='solid')
textx = -.5
points(c(-.5,-.5),c(0,400),type='l',col='gray')
} else {
points(dat$Group.1+sum(lrange[1:(i-1)])+2*(i-1), # plot high information items
dat$x[,1],type=ltyp,lwd=lwd,
col='red',pch=pchHigh,lty='solid')
thisx = sum(lrange[1:(i-1)])+2*(i-1)-.5
points(c(thisx,thisx),c(0,400),type='l',col='gray') # aesthetics: dividers
textx = sum(lrange[1:(i-1)])+2*(i-1) # where the k= should go
}
text(textx,224,paste('k =',thisL),cex=.8,pos=4) # specify length on plot
#error.bar(1:i,dat$x[,1],2*dat$x[,2])
}
### let's show the on the plot in the same way, to the left
dat = filterDowners(.df.anl[.df.anl$cw=='the',],3)
points(dat$Group.1-5,dat$x[,1],
type=ltyp,lwd=lwd,ylim=c(miny,maxy),pch=pchLow,col='darkgreen')
dat = filterUppers(.df.anl[.df.anl$cw=='the',],3)
points(dat$Group.1-5,
dat$x[,1],type=ltyp,lwd=lwd,col='red',pch=pchHigh,lty='solid')
thisx = sum(lrange[1:(i-1)])+2*(i-1)-.5
points(c(thisx,thisx),c(0,400),type='l',col='gray')
text(-6,224,paste('\"the\"'),cex=.8,pos=4)
title(xlab='Character position (1, ..., k)',line=1)
# note: this script requires .df.anl (data frame for analysis)
# generated in the analysis.R, after cleaning, etc.
#########################################################
#
# keystroke-based ("trial-based") resampling to get distribution over coefficients
# these data generate Figure 2
#
#########################################################
# randomly sample from keystrokes rather than subjects, showing that we can use
# randomly sampled sets of individual keystrokes and obtain significant
# contributions of the target predictors: information and word frequency
coefsAll = data.frame(matrix(0,ncol=3,nrow=1000)) # initialized data frame for coefficients
colnames(coefsAll) = list('uninfo','Inext','Iprev')
coefsFk = coefsAll
coefsIk = coefsAll
for (i in 1:1000) {
print(i)
# all IKIs model, then save coefficients
.df.temp = .df.anl[sample(1:dim(.df.anl)[1],2000),] # ensure the models have save # of IKIs
lmo = lm(zRT~digraphBL+bicharFreq+uninfo+givenNextW+givenPrevW,data=.df.temp)
coefsAll[i,] = lmo$coefficients[4:6]
# first key dynamics model, then save coefficients
.df.temp = .df.anl[.df.anl$fk,]
.df.temp = .df.temp[sample(1:dim(.df.temp)[1],2000),] # ensure the models have save # of IKIs
lmo = lm(zRT~digraphBL+bicharFreq+uninfo+givenNextW+givenPrevW,data=.df.temp)
coefsFk[i,] = lmo$coefficients[4:6]
# internal key dynamics model, then save coefficients
.df.temp = .df.anl[!.df.anl$fk,]
.df.temp = .df.temp[sample(1:dim(.df.temp)[1],2000),] # ensure the models have save # of IKIs
lmo = lm(zRT~digraphBL+bicharFreq+uninfo+givenNextW+givenPrevW,data=.df.temp)
coefsIk[i,] = lmo$coefficients[4:6]
}
# there is a significant interaction between prior / current and key type
coefsToTest = rbind( # centering variables for interaction term
data.frame(beta=coefsFk$Iprev,pred=-0.5,src=-.5,sim=as.factor(1:1000)), # -.5 = fk
data.frame(beta=coefsFk$uninfo,pred=0.5,src=-.5,sim=as.factor(1:1000)),
data.frame(beta=coefsIk$Iprev,pred=-0.5,src=0.5,sim=as.factor(1001:2000)), # -.5 = prior W
data.frame(beta=coefsIk$uninfo,pred=0.5,src=0.5,sim=as.factor(1001:2000))
)
lmo = lmer(beta~pred*src+(1|sim),data=coefsToTest)
coefs = data.frame(summary(lmo)$coefficient)
coefs$p = 2*(1-pnorm(abs(coefs$t.value)))
coefs
# also, prior word better predicts fk; but current word (P) better predicts ik
t.test(coefsFk$Iprev-coefsFk$uninfo)
t.test(coefsIk$Iprev-coefsIk$uninfo)
#
# time to produce Figure 2
#
pdf(file='Figure_2_beta_by_predictor.pdf',width=7,height=6)
par(mfrow=c(1,1)) # two sided for first key / internal keys
# much done by hand to even positions out, etc.
plot(1,mean(coefsFk$Iprev),xlim=c(.5,7),ylim=c(-.005,.04), # plot first key data, prior information (P(w|w_{t-1}))
pch=17,ylab=expression(beta),xaxt='none',xlab='Predictor',
main='Predicting IKI by First Key / Internal Keys')
error.bar(1,mean(coefsFk$Iprev),3*sd(coefsFk$Iprev)/sqrt(1000))
points(2,mean(coefsFk$uninfo),pch=15) # add unigram info, etc.
error.bar(2,mean(coefsFk$uninfo),3*sd(coefsFk$uninfo)/sqrt(1000))
points(3,mean(coefsFk$Inext),pch=16) # add next info
error.bar(3,mean(coefsFk$Inext),3*sd(coefsFk$Inext)/sqrt(1000))
points(4.5,mean(coefsIk$Iprev),pch=17) # now do the same, but internal keys
error.bar(4.5,mean(coefsIk$Iprev),3*sd(coefsIk$Iprev)/sqrt(1000))
points(5.5,mean(coefsIk$uninfo),pch=15)
error.bar(5.5,mean(coefsIk$uninfo),3*sd(coefsIk$uninfo)/sqrt(1000))
points(6.5,mean(coefsIk$Inext),pch=16)
error.bar(6.5,mean(coefsIk$Inext),3*sd(coefsIk$Inext)/sqrt(1000))
points(c(3.75,3.75),c(-1,1),col='gray',type='l') # let's put on some dressing
points(c(-1,10),c(0,0),col='gray',type='l')
text(2,.035,'i = 1')
text(5.5,.035,'i > 1')
axis(side=1,at=c(1,2,3,4.5,5.5,6.5),labels=c(
expression(paste('P(w'[t],'|w'[t-1],')')), # x axis labels
expression(paste('P(w'[t],')')),
expression(paste('P(w'[t],'|w'[t+1],')')),
expression(paste('P(w'[t],'|w'[t-1],')')),
expression(paste('P(w'[t],')')),
expression(paste('P(w'[t],'|w'[t+1],')'))
),cex.axis=.8)
dev.off()
# note: this script requires .df.anl (data frame for analysis)
# generated in the analysis.R, after cleaning, etc.
#########################################################
#
# linear models (no lmer) and print to latex (stargazer is amazing)
#
#########################################################
# digraph intercept alone captures 20% of the variance!
summary(lm(zRT~digraphBL,data=.df.anl))
# method 1: throw it all in
lmo = lm(zRT~digraphBL+bicharFreq+uninfo+givenNextW+givenPrevW,data=.df.anl)
# method 2: use zRT residual from digraphBL
residDV = resid(lm(zRT~digraphBL,data=.df.anl))
lmo_resid = lm(residDV~bicharFreq+uninfo+givenNextW+givenPrevW,data=.df.anl)
# results: first-key dynamics more strongly affected by prior word than last key (using method 1 above)
lmo_fk = lm(zRT~digraphBL+bicharFreq+givenPrevW+uninfo+givenNextW,data=.df.anl[.df.anl$fk,]) # first key predictions
lmo_ik = lm(1*zRT~digraphBL+bicharFreq+uninfo+givenNextW+givenPrevW,data=.df.anl[!.df.anl$fk,]) # internal key predictions
stats.table = stargazer(lmo,lmo_resid,lmo_fk,lmo_ik,star.cutoffs=c(.001,.0001,.00001),
omit.stat=c('f','res.dev','adj.rsq','ser'),float.env='table*',
dep.var.labels=c('$z_{IKI}$','$Residual z_{IKI}$','$z_{IKI-first}$','$z_{IKI-internal}$'),
dep.var.labels.include=T,
covariate.labels=c('$\\bar{z}_{IKI,digraph}$',
'$f(c_{t\'-1},c_{t\'})$',
'$p(w|w_{prior})$',
'$p(w)$',
'$p(w|w_{next})$',
'Constant'))
write(stats.table,file=paste(rootFolder,'resultsTableRegresionModels.tex',sep=''),append=F)
# check results with lmer; tough to converge due to many layers of complexity (subject, word, bichar)
#lmo = lmer(zRT~digraphBL+bicharFreq+uninfo+givenNextW+givenPrevW+
#             (1+givenPrevW|s)+
#             (1+givenPrevW|cw),data=.df.anl)
#summary(lmo)
#coefs = data.frame(summary(lmo)$coefficient)
#coefs$p = 2*(1-pnorm(abs(coefs$t.value)))
#coefs
# note: this script requires .df.anl (data frame for analysis)
# generated in the analysis.R, after cleaning, etc.
#########################################################
#
# linear models (no lmer) and print to latex (stargazer is amazing)
#
#########################################################
# digraph intercept alone captures 20% of the variance!
summary(lm(zRT~digraphBL,data=.df.anl))
# method 1: throw it all in
lmo = lm(zRT~digraphBL+bicharFreq+uninfo+givenNextW+givenPrevW,data=.df.anl)
# method 2: use zRT residual from digraphBL
residDV = resid(lm(zRT~digraphBL,data=.df.anl))
lmo_resid = lm(residDV~bicharFreq+uninfo+givenNextW+givenPrevW,data=.df.anl)
# results: first-key dynamics more strongly affected by prior word than last key (using method 1 above)
lmo_fk = lm(zRT~digraphBL+bicharFreq+givenPrevW+uninfo+givenNextW,data=.df.anl[.df.anl$fk,]) # first key predictions
lmo_ik = lm(1*zRT~digraphBL+bicharFreq+uninfo+givenNextW+givenPrevW,data=.df.anl[!.df.anl$fk,]) # internal key predictions
stats.table = stargazer(lmo,lmo_resid,lmo_fk,lmo_ik,star.cutoffs=c(.001,.0001,.00001),
omit.stat=c('f','res.dev','adj.rsq','ser'),float.env='table*',
dep.var.labels=c('$z_{IKI}$','$Residual z_{IKI}$','$z_{IKI-first}$','$z_{IKI-internal}$'),
dep.var.labels.include=T,
covariate.labels=c('$\\bar{z}_{IKI,digraph}$',
'$f(c_{t\'-1},c_{t\'})$',
'$p(w|w_{prior})$',
'$p(w)$',
'$p(w|w_{next})$',
'Constant'))
write(stats.table,file=paste(rootFolder,'resultsTableRegressionModels.tex',sep=''),append=F)
# check results with lmer; tough to converge due to many layers of complexity (subject, word, bichar)
#lmo = lmer(zRT~digraphBL+bicharFreq+uninfo+givenNextW+givenPrevW+
#             (1+givenPrevW|s)+
#             (1+givenPrevW|cw),data=.df.anl)
#summary(lmo)
#coefs = data.frame(summary(lmo)$coefficient)
#coefs$p = 2*(1-pnorm(abs(coefs$t.value)))
#coefs
# note: this script requires .df.anl (data frame for analysis)
# generated in the analysis.R, after cleaning, etc.
#########################################################
#
# linear models (no lmer) and print to latex (stargazer is amazing)
#
#########################################################
# digraph intercept alone captures 20% of the variance!
summary(lm(zRT~digraphBL,data=.df.anl))
# method 1: throw it all in
lmo = lm(zRT~digraphBL+bicharFreq+givenPrevW+uninfo+givenNextW,data=.df.anl)
# method 2: use zRT residual from digraphBL
residDV = resid(lm(zRT~digraphBL,data=.df.anl))
lmo_resid = lm(residDV~bicharFreq+givenPrevW+uninfo+givenNextW,data=.df.anl)
# results: first-key dynamics more strongly affected by prior word than last key (using method 1 above)
lmo_fk = lm(zRT~digraphBL+bicharFreq+givenPrevW+uninfo+givenNextW,data=.df.anl[.df.anl$fk,]) # first key predictions
lmo_ik = lm(1*zRT~digraphBL+bicharFreq+givenPrevW+uninfo+givenNextW,data=.df.anl[!.df.anl$fk,]) # internal key predictions
stats.table = stargazer(lmo,lmo_resid,lmo_fk,lmo_ik,star.cutoffs=c(.001,.0001,.00001),
omit.stat=c('f','res.dev','adj.rsq','ser'),float.env='table*',
dep.var.labels=c('$z_{IKI}$','$Residual z_{IKI}$','$z_{IKI-first}$','$z_{IKI-internal}$'),
dep.var.labels.include=T,
covariate.labels=c('$\\bar{z}_{IKI,digraph}$',
'$f(c_{t\'-1},c_{t\'})$',
'$p(w|w_{prior})$',
'$p(w)$',
'$p(w|w_{next})$',
'Constant'))
write(stats.table,file=paste(rootFolder,'resultsTableRegressionModels.tex',sep=''),append=F)
# check results with lmer; tough to converge due to many layers of complexity (subject, word, bichar)
#lmo = lmer(zRT~digraphBL+bicharFreq+uninfo+givenNextW+givenPrevW+
#             (1+givenPrevW|s)+
#             (1+givenPrevW|cw),data=.df.anl)
#summary(lmo)
#coefs = data.frame(summary(lmo)$coefficient)
#coefs$p = 2*(1-pnorm(abs(coefs$t.value)))
#coefs
# note: this script requires .df.anl (data frame for analysis)
# generated in the analysis.R, after cleaning, etc.
#########################################################
#
# print out a sample of data
#
#########################################################
.df.anl$priorChar = as.character(.df.anl$priorChar)
.df.anl$Char = as.character(.df.anl$Char)
.df.anl$priorChar[.df.anl$priorChar== ' '] = '` \''
sgtbl <- paste(stargazer(select(.df.anl[20:30,],c(priorChar,Char,RT,zRT,fk,digraphBL,bicharFreq,givenPrevW,uninfo,givenNextW,pw,cw,nw)),
summary=F,
float.env='table*',
covariate.labels=c('$c_{i\'-1}$' , '$c_{i\'}$' , '$IKI$', '$z_{IKI}$' ,
'first key?' , 'digraph $\\bar{z}_{IKI}$' , '$f(c_{t\'-1},c_{t\'})$' ,
'$P(w|w_{prior})$' , '$P(w)$' , '$P(w|w_{next})$' , '$w_{t-1}$' ,
'$w_{t}$' , '$w_{t+1}$'),
title="Example section of keystroke data used in analyses",
font.size='small',
column.sep.width = '-1pt',
rownames=F,colnames=T))
write(sgtbl,file=paste(rootFolder,'dataTable.tex',sep=''),append=F)
# note: this script requires .df.anl (data frame for analysis)
# generated in the analysis.R, after cleaning, etc.
#########################################################
#
# print out a sample of data
#
#########################################################
.df.anl$priorChar = as.character(.df.anl$priorChar)
.df.anl$Char = as.character(.df.anl$Char)
.df.anl$priorChar[.df.anl$priorChar== ' '] = '` \''
sgtbl <- paste(stargazer(select(.df.anl[20:30,],c(priorChar,Char,RT,zRT,fk,digraphBL,bicharFreq,givenPrevW,uninfo,givenNextW,pw,cw,nw)),
summary=F,
float.env='table*',
covariate.labels=c('$c_{i\'-1}$' , '$c_{i\'}$' , '$IKI$', '$z_{IKI}$' ,
'first key?' , 'digraph $\\bar{z}_{IKI}$' , '$f(c_{t\'-1},c_{t\'})$' ,
'$-logP(w|w_{prior})$' , '$-logP(w)$' , '$-logP(w|w_{next})$' , '$w_{t-1}$' ,
'$w_{t}$' , '$w_{t+1}$'),
title="Example section of keystroke data used in analyses",
font.size='small',
column.sep.width = '-1pt',
rownames=F,colnames=T))
write(sgtbl,file=paste(rootFolder,'dataTable.tex',sep=''),append=F)
rootFolder = '~/Dropbox/webstuff/plot-summary/analysis/final-to-share/data/amt.replication.mar.2016/' # replication (AMT)
setwd(rootFolder)
library(lme4)
library(stargazer)
load('keystrokes.RData')
source('../../Participant-Details.R') # prints details in console
source('../../Clean-Data-Sheet.R') # prints details in console
source('../../Table-Sample-Data.R') # stores data sample as .tex in data folder
source('../../Results-Main-Stats.R') # stores coefficients / details as .tex in data folder
source('../../Figure-1.R') # stores figure as pdf in data folder
source('../../Figure-2.R') # stores figure as pdf in data folder; does extra stats, too on resampling
source('../../Figure-1.R') # stores figure as pdf in data folder
# note: this script requires .df.anl (data frame for analysis)
# generated in the analysis.R, after cleaning, etc.
# http://monkeysuncle.stanford.edu/?p=485
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
if(length(x) != length(y) | length(y) !=length(lower) | length(lower) != length(upper))
stop("vectors must be same length")
arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
filterDowners = function(.df.anl,thisL) { # to avoid using these lines twice... filters down data
.d = .df.anl[.df.anl$wlen==thisL&.df.anl$k<=thisL,]
.d = .d[.d$givenPrevW<median(.d$givenPrevW),]
dat = aggregate(.d$RT,by=list(.d$k),FUN = function(x) c(mean = mean(x), sd = sd(x)))
dat$x[,2] = dat$x[,2]/sqrt(length(unique(.d$s)))
return(dat)
}
.df.anl$residRT = resid(lm(RT~digraphBL,data=.df.anl))
filterUppers = function(.df.anl,thisL) {
.d = .df.anl[.df.anl$wlen==thisL&.df.anl$k<=thisL,]
.d = .d[.d$givenPrevW>=median(.d$givenPrevW),]
dat = aggregate(.d$RT,by=list(.d$k),FUN = function(x) c(mean = mean(x), sd = sd(x)))
dat$x[,2] = dat$x[,2]/sqrt(length(unique(.d$s)))
return(dat)
}
maxy = 225
miny = 100
lrange = 3:9
ltyp = 'o'
pchHigh = 16
pchLow = 15
lwd = 2
pdf(file='Figure_1_RT_by_k.pdf',width=7,height=6)
for (i in 1:length(lrange)) {
thisL = lrange[i] #
dat = filterDowners(.df.anl,thisL) # low information
if (i == 1) {
plot(dat$Group.1,dat$x[,1],type=ltyp,lwd=lwd, # plot low-information items
ylim=c(miny,maxy),xlim=c(-4,54),xaxt='none',
pch=pchLow,col='darkgreen',
xlab='',ylab='IKI (ms)',
main='IKI by Word Length and Predictability')
} else {
points(dat$Group.1+sum(lrange[1:(i-1)])+2*(i-1),dat$x[,1], # superimpose
type=ltyp,lwd=lwd,ylim=c(miny,maxy),
pch=pchLow,col='darkgreen')
}
#error.bar(1:i,dat$x[,1],2*dat$x[,2])
dat = filterUppers(.df.anl,thisL) # high information
if (i == 1) {
points(dat$Group.1,dat$x[,1],type=ltyp,
lwd=lwd,col='red',pch=pchHigh,lty='solid')
textx = -.5
points(c(-.5,-.5),c(0,400),type='l',col='gray')
} else {
points(dat$Group.1+sum(lrange[1:(i-1)])+2*(i-1), # plot high information items
dat$x[,1],type=ltyp,lwd=lwd,
col='red',pch=pchHigh,lty='solid')
thisx = sum(lrange[1:(i-1)])+2*(i-1)-.5
points(c(thisx,thisx),c(0,400),type='l',col='gray') # aesthetics: dividers
textx = sum(lrange[1:(i-1)])+2*(i-1) # where the k= should go
}
text(textx,224,paste('k =',thisL),cex=.8,pos=4) # specify length on plot
#error.bar(1:i,dat$x[,1],2*dat$x[,2])
}
### let's show the on the plot in the same way, to the left
dat = filterDowners(.df.anl[.df.anl$cw=='the',],3)
points(dat$Group.1-5,dat$x[,1],
type=ltyp,lwd=lwd,ylim=c(miny,maxy),pch=pchLow,col='darkgreen')
dat = filterUppers(.df.anl[.df.anl$cw=='the',],3)
points(dat$Group.1-5,
dat$x[,1],type=ltyp,lwd=lwd,col='red',pch=pchHigh,lty='solid')
thisx = sum(lrange[1:(i-1)])+2*(i-1)-.5
points(c(thisx,thisx),c(0,400),type='l',col='gray')
text(-6,224,paste('\"the\"'),cex=.8,pos=4)
title(xlab='Character position (1, ..., k)',line=1)
dev.off()
####
#### this script assumes you have applied sheetGenerate.R for each data subfolder
####
#rootFolder = '~/Dropbox/webstuff/plot-summary/analysis/final-to-share/data/amt.replication.mar.2016/' # replication (AMT)
rootFolder = '~/Dropbox/webstuff/plot-summary/analysis/final-to-share/data/sona.apr.2016/' # second study (SONA / with genre)
#rootFolder = '~/Dropbox/webstuff/plot-summary/analysis/final-to-share/data/sona.dec.2015/' # first SONA study
setwd(rootFolder)
library(lme4)
library(stargazer)
load('keystrokes.RData')
source('../../Participant-Details.R') # prints details in console
source('../../Clean-Data-Sheet.R') # prints details in console
source('../../Table-Sample-Data.R') # stores data sample as .tex in data folder
source('../../Results-Main-Stats.R') # stores coefficients / details as .tex in data folder
source('../../Figure-1.R') # stores figure as pdf in data folder
source('../../Figure-2.R') # stores figure as pdf in data folder; does extra stats, too on resampling
rootFolder = '~/Dropbox/webstuff/plot-summary/analysis/final-to-share/data/sona.dec.2015/' # first SONA study
setwd(rootFolder)
library(lme4)
library(stargazer)
load('keystrokes.RData')
source('../../Participant-Details.R') # prints details in console
source('../../Clean-Data-Sheet.R') # prints details in console
source('../../Table-Sample-Data.R') # stores data sample as .tex in data folder
source('../../Results-Main-Stats.R') # stores coefficients / details as .tex in data folder
rootFolder = '~/Dropbox/webstuff/plot-summary/analysis/final-to-share/data/sona.dec.2015/' # first SONA study
setwd(rootFolder)
library(lme4)
library(stargazer)
load('keystrokes.RData')
source('../../Participant-Details.R') # prints details in console
source('../../Clean-Data-Sheet.R') # prints details in console
# if storing word list for stephanie:
write.table(file='~/Dropbox/wordList.txt',unique(.df.anl$cw),row.names=F,col.names=F,append=TRUE)
rootFolder = '~/Dropbox/webstuff/plot-summary/analysis/final-to-share/data/sona.apr.2016/' # second study (SONA / with genre)
#rootFolder = '~/Dropbox/webstuff/plot-summary/analysis/final-to-share/data/sona.dec.2015/' # first SONA study
setwd(rootFolder)
library(lme4)
library(stargazer)
load('keystrokes.RData')
source('../../Participant-Details.R') # prints details in console
source('../../Clean-Data-Sheet.R') # prints details in console
# if storing word list for stephanie:
write.table(file='~/Dropbox/wordList.txt',unique(.df.anl$cw),row.names=F,col.names=F,append=TRUE)
rootFolder = '~/Dropbox/webstuff/plot-summary/analysis/final-to-share/data/amt.replication.mar.2016/' # replication (AMT)
#rootFolder = '~/Dropbox/webstuff/plot-summary/analysis/final-to-share/data/sona.apr.2016/' # second study (SONA / with genre)
#rootFolder = '~/Dropbox/webstuff/plot-summary/analysis/final-to-share/data/sona.dec.2015/' # first SONA study
setwd(rootFolder)
library(lme4)
library(stargazer)
load('keystrokes.RData')
source('../../Participant-Details.R') # prints details in console
source('../../Clean-Data-Sheet.R') # prints details in console
# if storing word list for stephanie:
write.table(file='~/Dropbox/wordList.txt',unique(.df.anl$cw),row.names=F,col.names=F,append=TRUE)
